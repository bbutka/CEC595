{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNxk4DBUxzi0NIpkck47Wrb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/bbutka/CEC595/blob/main/Generate%20Transmitted%20Hamming%20Code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "ImZIZvk7TNFM"
      },
      "outputs": [],
      "source": [
        "def check_binary_validity(binary_num):\n",
        "    # Check if the input is a valid binary number with length between 4 and 11 bits\n",
        "    if len(binary_num) < 4 or len(binary_num) > 11:\n",
        "        return False\n",
        "    for bit in binary_num:\n",
        "        if bit not in ['0', '1']:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "def store_binary_bits(binary_num):\n",
        "    # Initialize a list with 11 locations, each set to 2\n",
        "    bit_storage = [2] * 11\n",
        "\n",
        "    # Store the binary bits in the variable bit slots, LSB on the right\n",
        "    for i, bit in enumerate(reversed(binary_num)):\n",
        "        bit_storage[i] = int(bit)\n",
        "\n",
        "    return bit_storage\n",
        "\n",
        "def calculate_parity_bits(bit_storage, bit_length):\n",
        "    # Calculate parity bits based on given dependencies\n",
        "    parity_positions = [1, 2, 4]  # Parity bit positions are 1, 2, and 4\n",
        "    if bit_length >= 8:\n",
        "        parity_positions.append(8)\n",
        "\n",
        "    dependencies = {\n",
        "        1: [1, 3, 5, 7, 9, 11, 13, 15],\n",
        "        2: [2, 3, 6, 7, 10, 11, 14, 15],\n",
        "        4: [4, 5, 6, 7, 12, 13, 14, 15],\n",
        "        8: [8, 9, 10, 11, 12, 13, 14, 15]\n",
        "    }\n",
        "\n",
        "    parity_bits = {}\n",
        "\n",
        "    for p in parity_positions:\n",
        "        parity_sum = 0\n",
        "        used_bits = []\n",
        "        for i in dependencies[p]:\n",
        "            if i <= bit_length:\n",
        "                if bit_storage[i - 1] != 2:\n",
        "                    parity_sum += bit_storage[i - 1]\n",
        "                used_bits.append(i)\n",
        "\n",
        "        parity_bits[p] = parity_sum % 2\n",
        "        print_parity_info(p, used_bits, bit_storage, parity_sum % 2)\n",
        "\n",
        "    return parity_bits\n",
        "\n",
        "def print_parity_info(parity_pos, used_bits, bit_storage, parity_value):\n",
        "    # Print the values used for each parity bit and sent data bits\n",
        "    used_bits_str = ' '.join(f\"{i:2}\" for i in used_bits)\n",
        "    values_used_str = ' '.join(f\"{bit_storage[i-1]:2}\" for i in used_bits)\n",
        "\n",
        "    print(f\"\\nParity bit P{parity_pos} calculation:\")\n",
        "    print(f\"Bit positions used: {used_bits_str}\")\n",
        "    print(f\"Values used:        {values_used_str}\")\n",
        "    print(f\"P{parity_pos} = {parity_value}\")\n",
        "\n",
        "def display_bits(binary_num, bit_storage):\n",
        "    bit_length = len(binary_num)\n",
        "    bit_positions = ' '.join(f\"{i:2}\" for i in range(bit_length, 0, -1))\n",
        "    data_bits = ' '.join(f\"{bit_storage[i-1]:2}\" for i in range(bit_length, 0, -1))\n",
        "\n",
        "    print(f\"\\nBit position: {bit_positions}\")\n",
        "    print(f\"Data bits:    {data_bits}\")\n",
        "\n",
        "def create_transmitted(bit_storage, parity_bits):\n",
        "    transmitted = [0] * 15\n",
        "    data_index = 0\n",
        "    data_positions = [2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14]\n",
        "    for i in range(15):\n",
        "        if i == 0:\n",
        "            transmitted[i] = parity_bits[1]\n",
        "        elif i == 1:\n",
        "            transmitted[i] = parity_bits[2]\n",
        "        elif i == 3:\n",
        "            transmitted[i] = parity_bits[4]\n",
        "        elif i == 7:\n",
        "            if 8 in parity_bits:\n",
        "                transmitted[i] = parity_bits[8]\n",
        "            else:\n",
        "                transmitted[i] = 0\n",
        "        else:\n",
        "            # Data positions\n",
        "            if data_index < len(data_positions):\n",
        "                transmitted[i] = bit_storage[data_index]\n",
        "                data_index += 1\n",
        "\n",
        "    return transmitted\n",
        "\n",
        "def display_transmitted(transmitted, bit_length):\n",
        "    if bit_length < 5:\n",
        "        max_bit = 3 + bit_length\n",
        "    else:\n",
        "        max_bit = 4 + bit_length\n",
        "\n",
        "    bit_positions = ' '.join(f\"{i:2}\" for i in range(max_bit, 0, -1))\n",
        "    data_bits = ' '.join(f\"{transmitted[i-1]:2}\" for i in range(max_bit, 0, -1))\n",
        "\n",
        "    print(f\"\\nTransmitted bit positions: {bit_positions}\")\n",
        "    print(f\"Transmitted data bits:     {data_bits}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Input binary number from the user\n",
        "binary_num = input(\"Enter a binary number (4 to 11 bits): \")\n",
        "\n",
        "if not check_binary_validity(binary_num):\n",
        "    print(\"Invalid binary number. Please enter a binary number with 4 to 11 bits.\")\n",
        "else:\n",
        "    bit_storage = store_binary_bits(binary_num)\n",
        "    bit_length = len(binary_num)\n",
        "    display_bits(binary_num, bit_storage)\n",
        "    parity_bits = calculate_parity_bits(bit_storage, bit_length)\n",
        "    transmitted = create_transmitted(bit_storage, parity_bits)\n",
        "    display_transmitted(transmitted, bit_length)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wBL_U2C_TUqc",
        "outputId": "b0fe47ba-1999-414a-d7d0-7ad7a824be43"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a binary number (4 to 11 bits): 10101010101\n",
            "\n",
            "Bit position: 11 10  9  8  7  6  5  4  3  2  1\n",
            "Data bits:     1  0  1  0  1  0  1  0  1  0  1\n",
            "\n",
            "Parity bit P1 calculation:\n",
            "Bit positions used:  1  3  5  7  9 11\n",
            "Values used:         1  1  1  1  1  1\n",
            "P1 = 0\n",
            "\n",
            "Parity bit P2 calculation:\n",
            "Bit positions used:  2  3  6  7 10 11\n",
            "Values used:         0  1  0  1  0  1\n",
            "P2 = 1\n",
            "\n",
            "Parity bit P4 calculation:\n",
            "Bit positions used:  4  5  6  7\n",
            "Values used:         0  1  0  1\n",
            "P4 = 0\n",
            "\n",
            "Parity bit P8 calculation:\n",
            "Bit positions used:  8  9 10 11\n",
            "Values used:         0  1  0  1\n",
            "P8 = 0\n",
            "\n",
            "Transmitted bit positions: 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1\n",
            "Transmitted data bits:      1  0  1  0  1  0  1  0  0  1  0  0  1  1  0\n"
          ]
        }
      ]
    }
  ]
}